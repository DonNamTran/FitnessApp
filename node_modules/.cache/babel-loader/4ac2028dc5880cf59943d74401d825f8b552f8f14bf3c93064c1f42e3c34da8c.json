{"ast":null,"code":"/**\n * Get the type of the given object.\n *\n * @param object - The object to get the type of.\n * @returns The type of the given object.\n */\nfunction getObjectType(object) {\n  if (typeof object !== \"object\" || object === null) {\n    return 0 /* ObjectType.NOT */;\n  }\n\n  if (Array.isArray(object)) {\n    return 2 /* ObjectType.ARRAY */;\n  }\n\n  if (isRecord(object)) {\n    return 1 /* ObjectType.RECORD */;\n  }\n\n  if (object instanceof Set) {\n    return 3 /* ObjectType.SET */;\n  }\n\n  if (object instanceof Map) {\n    return 4 /* ObjectType.MAP */;\n  }\n\n  return 5 /* ObjectType.OTHER */;\n}\n/**\n * Get the keys of the given objects including symbol keys.\n *\n * Note: Only keys to enumerable properties are returned.\n *\n * @param objects - An array of objects to get the keys of.\n * @returns A set containing all the keys of all the given objects.\n */\nfunction getKeys(objects) {\n  const keys = new Set();\n  /* eslint-disable functional/no-loop-statement -- using a loop here is more efficient. */\n  for (const object of objects) {\n    for (const key of [...Object.keys(object), ...Object.getOwnPropertySymbols(object)]) {\n      keys.add(key);\n    }\n  }\n  /* eslint-enable functional/no-loop-statement */\n  return keys;\n}\n/**\n * Does the given object have the given property.\n *\n * @param object - The object to test.\n * @param property - The property to test.\n * @returns Whether the object has the property.\n */\nfunction objectHasProperty(object, property) {\n  return typeof object === \"object\" && Object.prototype.propertyIsEnumerable.call(object, property);\n}\n/**\n * Get an iterable object that iterates over the given iterables.\n */\nfunction getIterableOfIterables(iterables) {\n  return {\n    *[Symbol.iterator]() {\n      // eslint-disable-next-line functional/no-loop-statement\n      for (const iterable of iterables) {\n        // eslint-disable-next-line functional/no-loop-statement\n        for (const value of iterable) {\n          yield value;\n        }\n      }\n    }\n  };\n}\nconst validRecordToStringValues = new Set([\"[object Object]\", \"[object Module]\"]);\n/**\n * Does the given object appear to be a record.\n */\nfunction isRecord(value) {\n  // All records are objects.\n  if (!validRecordToStringValues.has(Object.prototype.toString.call(value))) {\n    return false;\n  }\n  const {\n    constructor\n  } = value;\n  // If has modified constructor.\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (constructor === undefined) {\n    return true;\n  }\n  // eslint-disable-next-line prefer-destructuring\n  const prototype = constructor.prototype;\n  // If has modified prototype.\n  if (prototype === null || typeof prototype !== \"object\" || !validRecordToStringValues.has(Object.prototype.toString.call(prototype))) {\n    return false;\n  }\n  // If constructor does not have an Object-specific method.\n  // eslint-disable-next-line sonarjs/prefer-single-boolean-return, no-prototype-builtins\n  if (!prototype.hasOwnProperty(\"isPrototypeOf\")) {\n    return false;\n  }\n  // Most likely a record.\n  return true;\n}\nconst defaultMergeFunctions = {\n  mergeMaps: defaultMergeMaps,\n  mergeSets: defaultMergeSets,\n  mergeArrays: defaultMergeArrays,\n  mergeRecords: defaultMergeRecords,\n  mergeOthers: leaf\n};\n/**\n * Special values that tell deepmerge-ts to perform a certain action.\n */\nconst actions = {\n  defaultMerge: Symbol(\"deepmerge-ts: default merge\"),\n  skip: Symbol(\"deepmerge-ts: skip\")\n};\n/**\n * The default function to update meta data.\n */\nfunction defaultMetaDataUpdater(previousMeta, metaMeta) {\n  return metaMeta;\n}\n/**\n * Deeply merge objects.\n *\n * @param objects - The objects to merge.\n */\nfunction deepmerge() {\n  return deepmergeCustom({})(...arguments);\n}\nfunction deepmergeCustom(options, rootMetaData) {\n  const utils = getUtils(options, customizedDeepmerge);\n  /**\n   * The customized deepmerge function.\n   */\n  function customizedDeepmerge() {\n    for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n      objects[_key] = arguments[_key];\n    }\n    return mergeUnknowns(objects, utils, rootMetaData);\n  }\n  return customizedDeepmerge;\n}\n/**\n * The the full options with defaults apply.\n *\n * @param options - The options the user specified\n */\nfunction getUtils(options, customizedDeepmerge) {\n  var _a, _b;\n  return {\n    defaultMergeFunctions,\n    mergeFunctions: {\n      ...defaultMergeFunctions,\n      ...Object.fromEntries(Object.entries(options).filter(_ref => {\n        let [key, option] = _ref;\n        return Object.prototype.hasOwnProperty.call(defaultMergeFunctions, key);\n      }).map(_ref2 => {\n        let [key, option] = _ref2;\n        return option === false ? [key, leaf] : [key, option];\n      }))\n    },\n    metaDataUpdater: (_a = options.metaDataUpdater) !== null && _a !== void 0 ? _a : defaultMetaDataUpdater,\n    deepmerge: customizedDeepmerge,\n    useImplicitDefaultMerging: (_b = options.enableImplicitDefaultMerging) !== null && _b !== void 0 ? _b : false,\n    actions\n  };\n}\n/**\n * Merge unknown things.\n *\n * @param values - The values.\n */\nfunction mergeUnknowns(values, utils, meta) {\n  if (values.length === 0) {\n    return undefined;\n  }\n  if (values.length === 1) {\n    return mergeOthers(values, utils, meta);\n  }\n  const type = getObjectType(values[0]);\n  // eslint-disable-next-line functional/no-conditional-statement -- add an early escape for better performance.\n  if (type !== 0 /* ObjectType.NOT */ && type !== 5 /* ObjectType.OTHER */) {\n    // eslint-disable-next-line functional/no-loop-statement -- using a loop here is more performant than mapping every value and then testing every value.\n    for (let m_index = 1; m_index < values.length; m_index++) {\n      if (getObjectType(values[m_index]) === type) {\n        continue;\n      }\n      return mergeOthers(values, utils, meta);\n    }\n  }\n  switch (type) {\n    case 1 /* ObjectType.RECORD */:\n      return mergeRecords(values, utils, meta);\n    case 2 /* ObjectType.ARRAY */:\n      return mergeArrays(values, utils, meta);\n    case 3 /* ObjectType.SET */:\n      return mergeSets(values, utils, meta);\n    case 4 /* ObjectType.MAP */:\n      return mergeMaps(values, utils, meta);\n    default:\n      return mergeOthers(values, utils, meta);\n  }\n}\n/**\n * Merge records.\n *\n * @param values - The records.\n */\nfunction mergeRecords(values, utils, meta) {\n  const result = utils.mergeFunctions.mergeRecords(values, utils, meta);\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeRecords !== utils.defaultMergeFunctions.mergeRecords) {\n    return utils.defaultMergeFunctions.mergeRecords(values, utils, meta);\n  }\n  return result;\n}\n/**\n * Merge arrays.\n *\n * @param values - The arrays.\n */\nfunction mergeArrays(values, utils, meta) {\n  const result = utils.mergeFunctions.mergeArrays(values, utils, meta);\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeArrays !== utils.defaultMergeFunctions.mergeArrays) {\n    return utils.defaultMergeFunctions.mergeArrays(values);\n  }\n  return result;\n}\n/**\n * Merge sets.\n *\n * @param values - The sets.\n */\nfunction mergeSets(values, utils, meta) {\n  const result = utils.mergeFunctions.mergeSets(values, utils, meta);\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeSets !== utils.defaultMergeFunctions.mergeSets) {\n    return utils.defaultMergeFunctions.mergeSets(values);\n  }\n  return result;\n}\n/**\n * Merge maps.\n *\n * @param values - The maps.\n */\nfunction mergeMaps(values, utils, meta) {\n  const result = utils.mergeFunctions.mergeMaps(values, utils, meta);\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeMaps !== utils.defaultMergeFunctions.mergeMaps) {\n    return utils.defaultMergeFunctions.mergeMaps(values);\n  }\n  return result;\n}\n/**\n * Merge other things.\n *\n * @param values - The other things.\n */\nfunction mergeOthers(values, utils, meta) {\n  const result = utils.mergeFunctions.mergeOthers(values, utils, meta);\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeOthers !== utils.defaultMergeFunctions.mergeOthers) {\n    return utils.defaultMergeFunctions.mergeOthers(values);\n  }\n  return result;\n}\n/**\n * The default strategy to merge records.\n *\n * @param values - The records.\n */\nfunction defaultMergeRecords(values, utils, meta) {\n  const result = {};\n  /* eslint-disable functional/no-loop-statement, functional/no-conditional-statement -- using a loop here is more performant. */\n  for (const key of getKeys(values)) {\n    const propValues = [];\n    for (const value of values) {\n      if (objectHasProperty(value, key)) {\n        propValues.push(value[key]);\n      }\n    }\n    if (propValues.length === 0) {\n      continue;\n    }\n    const updatedMeta = utils.metaDataUpdater(meta, {\n      key,\n      parents: values\n    });\n    const propertyResult = mergeUnknowns(propValues, utils, updatedMeta);\n    if (propertyResult === actions.skip) {\n      continue;\n    }\n    if (key === \"__proto__\") {\n      Object.defineProperty(result, key, {\n        value: propertyResult,\n        configurable: true,\n        enumerable: true,\n        writable: true\n      });\n    } else {\n      result[key] = propertyResult;\n    }\n  }\n  /* eslint-enable functional/no-loop-statement, functional/no-conditional-statement */\n  return result;\n}\n/**\n * The default strategy to merge arrays.\n *\n * @param values - The arrays.\n */\nfunction defaultMergeArrays(values) {\n  return values.flat();\n}\n/**\n * The default strategy to merge sets.\n *\n * @param values - The sets.\n */\nfunction defaultMergeSets(values) {\n  return new Set(getIterableOfIterables(values));\n}\n/**\n * The default strategy to merge maps.\n *\n * @param values - The maps.\n */\nfunction defaultMergeMaps(values) {\n  return new Map(getIterableOfIterables(values));\n}\n/**\n * Get the last value in the given array.\n */\nfunction leaf(values) {\n  return values[values.length - 1];\n}\nexport { deepmerge, deepmergeCustom };","map":{"version":3,"names":["getObjectType","object","Array","isArray","isRecord","Set","Map","getKeys","objects","keys","key","Object","getOwnPropertySymbols","add","objectHasProperty","property","prototype","propertyIsEnumerable","call","getIterableOfIterables","iterables","Symbol","iterator","iterable","value","validRecordToStringValues","has","toString","constructor","undefined","hasOwnProperty","defaultMergeFunctions","mergeMaps","defaultMergeMaps","mergeSets","defaultMergeSets","mergeArrays","defaultMergeArrays","mergeRecords","defaultMergeRecords","mergeOthers","leaf","actions","defaultMerge","skip","defaultMetaDataUpdater","previousMeta","metaMeta","deepmerge","deepmergeCustom","options","rootMetaData","utils","getUtils","customizedDeepmerge","mergeUnknowns","_a","_b","mergeFunctions","fromEntries","entries","filter","option","map","metaDataUpdater","useImplicitDefaultMerging","enableImplicitDefaultMerging","values","meta","length","type","m_index","result","propValues","push","updatedMeta","parents","propertyResult","defineProperty","configurable","enumerable","writable","flat"],"sources":["C:/Users/tornt/OneDrive/Desktop/temp/node_modules/deepmerge-ts/dist/node/index.mjs"],"sourcesContent":["/**\n * Get the type of the given object.\n *\n * @param object - The object to get the type of.\n * @returns The type of the given object.\n */\nfunction getObjectType(object) {\n    if (typeof object !== \"object\" || object === null) {\n        return 0 /* ObjectType.NOT */;\n    }\n    if (Array.isArray(object)) {\n        return 2 /* ObjectType.ARRAY */;\n    }\n    if (isRecord(object)) {\n        return 1 /* ObjectType.RECORD */;\n    }\n    if (object instanceof Set) {\n        return 3 /* ObjectType.SET */;\n    }\n    if (object instanceof Map) {\n        return 4 /* ObjectType.MAP */;\n    }\n    return 5 /* ObjectType.OTHER */;\n}\n/**\n * Get the keys of the given objects including symbol keys.\n *\n * Note: Only keys to enumerable properties are returned.\n *\n * @param objects - An array of objects to get the keys of.\n * @returns A set containing all the keys of all the given objects.\n */\nfunction getKeys(objects) {\n    const keys = new Set();\n    /* eslint-disable functional/no-loop-statement -- using a loop here is more efficient. */\n    for (const object of objects) {\n        for (const key of [\n            ...Object.keys(object),\n            ...Object.getOwnPropertySymbols(object),\n        ]) {\n            keys.add(key);\n        }\n    }\n    /* eslint-enable functional/no-loop-statement */\n    return keys;\n}\n/**\n * Does the given object have the given property.\n *\n * @param object - The object to test.\n * @param property - The property to test.\n * @returns Whether the object has the property.\n */\nfunction objectHasProperty(object, property) {\n    return (typeof object === \"object\" &&\n        Object.prototype.propertyIsEnumerable.call(object, property));\n}\n/**\n * Get an iterable object that iterates over the given iterables.\n */\nfunction getIterableOfIterables(iterables) {\n    return {\n        *[Symbol.iterator]() {\n            // eslint-disable-next-line functional/no-loop-statement\n            for (const iterable of iterables) {\n                // eslint-disable-next-line functional/no-loop-statement\n                for (const value of iterable) {\n                    yield value;\n                }\n            }\n        },\n    };\n}\nconst validRecordToStringValues = new Set([\n    \"[object Object]\",\n    \"[object Module]\",\n]);\n/**\n * Does the given object appear to be a record.\n */\nfunction isRecord(value) {\n    // All records are objects.\n    if (!validRecordToStringValues.has(Object.prototype.toString.call(value))) {\n        return false;\n    }\n    const { constructor } = value;\n    // If has modified constructor.\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (constructor === undefined) {\n        return true;\n    }\n    // eslint-disable-next-line prefer-destructuring\n    const prototype = constructor.prototype;\n    // If has modified prototype.\n    if (prototype === null ||\n        typeof prototype !== \"object\" ||\n        !validRecordToStringValues.has(Object.prototype.toString.call(prototype))) {\n        return false;\n    }\n    // If constructor does not have an Object-specific method.\n    // eslint-disable-next-line sonarjs/prefer-single-boolean-return, no-prototype-builtins\n    if (!prototype.hasOwnProperty(\"isPrototypeOf\")) {\n        return false;\n    }\n    // Most likely a record.\n    return true;\n}\n\nconst defaultMergeFunctions = {\n    mergeMaps: defaultMergeMaps,\n    mergeSets: defaultMergeSets,\n    mergeArrays: defaultMergeArrays,\n    mergeRecords: defaultMergeRecords,\n    mergeOthers: leaf,\n};\n/**\n * Special values that tell deepmerge-ts to perform a certain action.\n */\nconst actions = {\n    defaultMerge: Symbol(\"deepmerge-ts: default merge\"),\n    skip: Symbol(\"deepmerge-ts: skip\"),\n};\n/**\n * The default function to update meta data.\n */\nfunction defaultMetaDataUpdater(previousMeta, metaMeta) {\n    return metaMeta;\n}\n/**\n * Deeply merge objects.\n *\n * @param objects - The objects to merge.\n */\nfunction deepmerge(...objects) {\n    return deepmergeCustom({})(...objects);\n}\nfunction deepmergeCustom(options, rootMetaData) {\n    const utils = getUtils(options, customizedDeepmerge);\n    /**\n     * The customized deepmerge function.\n     */\n    function customizedDeepmerge(...objects) {\n        return mergeUnknowns(objects, utils, rootMetaData);\n    }\n    return customizedDeepmerge;\n}\n/**\n * The the full options with defaults apply.\n *\n * @param options - The options the user specified\n */\nfunction getUtils(options, customizedDeepmerge) {\n    var _a, _b;\n    return {\n        defaultMergeFunctions,\n        mergeFunctions: {\n            ...defaultMergeFunctions,\n            ...Object.fromEntries(Object.entries(options)\n                .filter(([key, option]) => Object.prototype.hasOwnProperty.call(defaultMergeFunctions, key))\n                .map(([key, option]) => option === false ? [key, leaf] : [key, option])),\n        },\n        metaDataUpdater: ((_a = options.metaDataUpdater) !== null && _a !== void 0 ? _a : defaultMetaDataUpdater),\n        deepmerge: customizedDeepmerge,\n        useImplicitDefaultMerging: (_b = options.enableImplicitDefaultMerging) !== null && _b !== void 0 ? _b : false,\n        actions,\n    };\n}\n/**\n * Merge unknown things.\n *\n * @param values - The values.\n */\nfunction mergeUnknowns(values, utils, meta) {\n    if (values.length === 0) {\n        return undefined;\n    }\n    if (values.length === 1) {\n        return mergeOthers(values, utils, meta);\n    }\n    const type = getObjectType(values[0]);\n    // eslint-disable-next-line functional/no-conditional-statement -- add an early escape for better performance.\n    if (type !== 0 /* ObjectType.NOT */ && type !== 5 /* ObjectType.OTHER */) {\n        // eslint-disable-next-line functional/no-loop-statement -- using a loop here is more performant than mapping every value and then testing every value.\n        for (let m_index = 1; m_index < values.length; m_index++) {\n            if (getObjectType(values[m_index]) === type) {\n                continue;\n            }\n            return mergeOthers(values, utils, meta);\n        }\n    }\n    switch (type) {\n        case 1 /* ObjectType.RECORD */:\n            return mergeRecords(values, utils, meta);\n        case 2 /* ObjectType.ARRAY */:\n            return mergeArrays(values, utils, meta);\n        case 3 /* ObjectType.SET */:\n            return mergeSets(values, utils, meta);\n        case 4 /* ObjectType.MAP */:\n            return mergeMaps(values, utils, meta);\n        default:\n            return mergeOthers(values, utils, meta);\n    }\n}\n/**\n * Merge records.\n *\n * @param values - The records.\n */\nfunction mergeRecords(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeRecords(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeRecords !==\n                utils.defaultMergeFunctions.mergeRecords)) {\n        return utils.defaultMergeFunctions.mergeRecords(values, utils, meta);\n    }\n    return result;\n}\n/**\n * Merge arrays.\n *\n * @param values - The arrays.\n */\nfunction mergeArrays(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeArrays(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeArrays !==\n                utils.defaultMergeFunctions.mergeArrays)) {\n        return utils.defaultMergeFunctions.mergeArrays(values);\n    }\n    return result;\n}\n/**\n * Merge sets.\n *\n * @param values - The sets.\n */\nfunction mergeSets(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeSets(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeSets !== utils.defaultMergeFunctions.mergeSets)) {\n        return utils.defaultMergeFunctions.mergeSets(values);\n    }\n    return result;\n}\n/**\n * Merge maps.\n *\n * @param values - The maps.\n */\nfunction mergeMaps(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeMaps(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeMaps !== utils.defaultMergeFunctions.mergeMaps)) {\n        return utils.defaultMergeFunctions.mergeMaps(values);\n    }\n    return result;\n}\n/**\n * Merge other things.\n *\n * @param values - The other things.\n */\nfunction mergeOthers(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeOthers(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeOthers !==\n                utils.defaultMergeFunctions.mergeOthers)) {\n        return utils.defaultMergeFunctions.mergeOthers(values);\n    }\n    return result;\n}\n/**\n * The default strategy to merge records.\n *\n * @param values - The records.\n */\nfunction defaultMergeRecords(values, utils, meta) {\n    const result = {};\n    /* eslint-disable functional/no-loop-statement, functional/no-conditional-statement -- using a loop here is more performant. */\n    for (const key of getKeys(values)) {\n        const propValues = [];\n        for (const value of values) {\n            if (objectHasProperty(value, key)) {\n                propValues.push(value[key]);\n            }\n        }\n        if (propValues.length === 0) {\n            continue;\n        }\n        const updatedMeta = utils.metaDataUpdater(meta, {\n            key,\n            parents: values,\n        });\n        const propertyResult = mergeUnknowns(propValues, utils, updatedMeta);\n        if (propertyResult === actions.skip) {\n            continue;\n        }\n        if (key === \"__proto__\") {\n            Object.defineProperty(result, key, {\n                value: propertyResult,\n                configurable: true,\n                enumerable: true,\n                writable: true,\n            });\n        }\n        else {\n            result[key] = propertyResult;\n        }\n    }\n    /* eslint-enable functional/no-loop-statement, functional/no-conditional-statement */\n    return result;\n}\n/**\n * The default strategy to merge arrays.\n *\n * @param values - The arrays.\n */\nfunction defaultMergeArrays(values) {\n    return values.flat();\n}\n/**\n * The default strategy to merge sets.\n *\n * @param values - The sets.\n */\nfunction defaultMergeSets(values) {\n    return new Set(getIterableOfIterables(values));\n}\n/**\n * The default strategy to merge maps.\n *\n * @param values - The maps.\n */\nfunction defaultMergeMaps(values) {\n    return new Map(getIterableOfIterables(values));\n}\n/**\n * Get the last value in the given array.\n */\nfunction leaf(values) {\n    return values[values.length - 1];\n}\n\nexport { deepmerge, deepmergeCustom };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}