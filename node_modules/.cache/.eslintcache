[{"C:\\Users\\tornt\\OneDrive\\Desktop\\temp\\src\\index.js":"1","C:\\Users\\tornt\\OneDrive\\Desktop\\temp\\src\\App.js":"2","C:\\Users\\tornt\\OneDrive\\Desktop\\temp\\src\\spotify\\Spotify.js":"3","C:\\Users\\tornt\\OneDrive\\Desktop\\temp\\src\\spotify\\Login.js":"4","C:\\Users\\tornt\\OneDrive\\Desktop\\temp\\src\\spotify\\Dashboard.js":"5","C:\\Users\\tornt\\OneDrive\\Desktop\\temp\\src\\spotify\\useAuth.js":"6","C:\\Users\\tornt\\OneDrive\\Desktop\\temp\\src\\spotify\\Player.js":"7","C:\\Users\\tornt\\OneDrive\\Desktop\\temp\\src\\spotify\\TrackSearchResult.js":"8"},{"size":256,"mtime":1668737300000,"results":"9","hashOfConfig":"10"},{"size":3522,"mtime":1670457765085,"results":"11","hashOfConfig":"10"},{"size":481,"mtime":1670447545715,"results":"12","hashOfConfig":"10"},{"size":1646,"mtime":1670456627247,"results":"13","hashOfConfig":"10"},{"size":14723,"mtime":1670458621199,"results":"14","hashOfConfig":"10"},{"size":1571,"mtime":1670456934770,"results":"15","hashOfConfig":"10"},{"size":813,"mtime":1670448354866,"results":"16","hashOfConfig":"10"},{"size":686,"mtime":1670454555151,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"1waxv4k",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"21"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"21"},"C:\\Users\\tornt\\OneDrive\\Desktop\\temp\\src\\index.js",[],[],[],"C:\\Users\\tornt\\OneDrive\\Desktop\\temp\\src\\App.js",["46","47","48"],[],"C:\\Users\\tornt\\OneDrive\\Desktop\\temp\\src\\spotify\\Spotify.js",[],[],"C:\\Users\\tornt\\OneDrive\\Desktop\\temp\\src\\spotify\\Login.js",[],[],"C:\\Users\\tornt\\OneDrive\\Desktop\\temp\\src\\spotify\\Dashboard.js",["49","50","51","52","53"],[],"import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport useAuth from './useAuth'\r\nimport SpotifyWebApi from 'spotify-web-api-node'\r\nimport TrackSearchResult from './TrackSearchResult'\r\nimport Player from './Player'\r\nimport SpotifyPlayer from 'react-spotify-web-playback'\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n    clientId: '2387a2a4c594439a9f66f97fb886ca59',\r\n})\r\n\r\nconst homePage = 'http://localhost:3000'\r\n\r\nexport default function Dashboard({ code }) {\r\n    const accessToken = useAuth(code)\r\n    const [search, setSearch] = useState('')\r\n    const [searchResults, setSearchResults] = useState([])\r\n    const [playingTrack, setPlayingtrack] = useState([])\r\n    const [choosePlaylists, setChoosePlaylists] = useState(false)\r\n    const [chooseTopSongs, setChooseTopSongs] = useState(false)\r\n    const [chooseSearchSongs, setChooseSearchSongs] = useState(false)\r\n    const [chooseMainMenu, setChooseMainMenu] = useState(false)\r\n    const [artistID, setArtistID] = useState('')\r\n    const [market, setMarket] = useState('')\r\n    const [play, setPlay] = useState(false)\r\n\r\n    // Handles Search by Playlist button back end\r\n    function fChoosePlaylists() {\r\n        setChoosePlaylists(true)\r\n        setChooseTopSongs(false)\r\n        setChooseSearchSongs(false)\r\n        setChooseMainMenu(false)\r\n        setSearch('')\r\n    }\r\n    // Handles Search Top Songs by Artist button back end\r\n    function fChooseTopSongs() {\r\n        setChooseTopSongs(true)\r\n        setChooseSearchSongs(false)\r\n        setChooseMainMenu(false)\r\n        setChoosePlaylists(false)\r\n        setSearch('')\r\n    }\r\n    // Handles Search Songs button back end\r\n    function fChooseSearchSongs(){\r\n        setChooseSearchSongs(true)\r\n        setChooseMainMenu(false)\r\n        setChoosePlaylists(false)\r\n        setChooseTopSongs(false)\r\n        setSearch('')\r\n    }\r\n    // Handles Main Menu button back end\r\n    function fChooseMainMenu(){\r\n        setChooseMainMenu(true)\r\n        setChooseSearchSongs(false)\r\n        setChoosePlaylists(false)\r\n        setChooseTopSongs(false)\r\n    }\r\n\r\n    function chooseTrack(track) {\r\n        setPlayingtrack(track)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(!accessToken) return\r\n        spotifyApi.setAccessToken(accessToken)\r\n    }, [accessToken])\r\n\r\n    /* Search Songs code from https://www.youtube.com/watch?v=Xcet6msf3eE&t=237s \r\n     * Web Dev Simplified\r\n     * \"How to Build a Better Spotify with React\"\r\n     * \r\n     * All other search options were written by Matthew Greenway\r\n     * \r\n     * Searches based on which button is clicked and when the search bar is changed\r\n     */\r\n    useEffect(() => {\r\n        if (!search) return setSearchResults([])\r\n        if (!accessToken) return\r\n\r\n        let cancel = false\r\n        if (chooseSearchSongs) {\r\n        spotifyApi.searchTracks(search).then(res => {\r\n            if (cancel) return\r\n            console.log(res)\r\n            setSearchResults(\r\n            res.body.tracks.items.map(track => {\r\n                const smallestAlbumImage = track.album.images.reduce((smallest,image) => {\r\n                    if (image.height < smallest.height) return image\r\n                    return smallest\r\n                }, track.album.images[0])\r\n\r\n                return {\r\n                   artist: track.artists[0].name,\r\n                   title: track.name,\r\n                   uri: track.uri,\r\n                   albumUrl: smallestAlbumImage.url\r\n                }\r\n            }))\r\n        })}\r\n        if (choosePlaylists) {\r\n            spotifyApi.searchPlaylists(search).then(res => {\r\n                if (cancel) return\r\n                console.log(res)\r\n                setSearchResults(\r\n                res.body.playlists.items.map(items => {\r\n                    const smallestAlbumImage = items.images.reduce((smallest,image) => {\r\n                        if (image.height < smallest.height) return image\r\n                        return smallest\r\n                    }, items.images[0])\r\n    \r\n                    return {\r\n                        artist: items.name, // playlist name\r\n                        title: items.description, // playlist description\r\n                        uri: items.uri,\r\n                        albumUrl: smallestAlbumImage.url, //uncaught type error here?\r\n                        id: items.id\r\n                    }\r\n                }))\r\n            })}\r\n        if (chooseTopSongs) {\r\n            spotifyApi.searchArtists(search).then(res => {\r\n                if (cancel) return\r\n                console.log(res)\r\n                setArtistID(res.body.artists.items[0].id)\r\n                setMarket('US')\r\n            })\r\n            console.log(artistID)\r\n            spotifyApi.getArtistTopTracks(artistID, market).then(res => {\r\n                console.log(res)\r\n                setSearchResults(\r\n                res.body.tracks.map(tracks => {\r\n                    const smallestAlbumImage = tracks.album.images.reduce((smallest,image) => {\r\n                        if (image.height < smallest.height) return image\r\n                        return smallest\r\n                    }, tracks.album.images[0])\r\n        \r\n                    return {\r\n                        artist: tracks.artists[0].name, \r\n                        title: tracks.name, \r\n                        uri: tracks.uri,\r\n                        albumUrl: smallestAlbumImage.url\r\n                    }\r\n                }))\r\n            })}\r\n\r\n        return () => cancel = true\r\n    }, [search,accessToken])\r\n    /* Matthew Greenway wrote this with some shared code from the youtube video\r\n     * \r\n     * Searches for playlists by description\r\n     */\r\n    if (choosePlaylists) {\r\n        return (\r\n            <h1>\r\n                <button style={{ width: 300, backgroundColor: '#F56600', marginTop: 20, minHeight: 100, }} onClick={fChoosePlaylists}>\r\n                    <center>\r\n                        <h6>Search by Playlist</h6>\r\n                    </center>\r\n                </button>&nbsp;&nbsp;\r\n                <button style={{ width: 300, backgroundColor: '#522D80', marginTop: 20, minHeight: 100, }} onClick={fChooseTopSongs}>\r\n                    <center>\r\n                        <h6>Top Songs by Artist</h6>\r\n                    </center>\r\n                </button>&nbsp;&nbsp;\r\n                <button style={{ width: 300, backgroundColor: '#F56600', marginTop: 20, minHeight: 100, }} onClick={fChooseSearchSongs}>\r\n                    <center>\r\n                        <h6>Search by Song</h6>\r\n                    </center>\r\n                </button>&nbsp;&nbsp;\r\n                <a href={homePage}>\r\n                    <button style={{ width: 300, backgroundColor: '#522D80', marginTop: 20, minHeight: 100, }} onClick={fChooseMainMenu}>\r\n                        <center>\r\n                            <h6>Main Menu / Log Out</h6>\r\n                        </center>\r\n                </button>\r\n                </a>\r\n                <div className=\"search2\">\r\n                    <input value={search}\r\n                        onChange={e => setSearch(e.target.value)}\r\n                        placeholder='Search Playlists'\r\n                        type=\"text\"\r\n                    />\r\n                </div>&nbsp;\r\n                <div className='container2'>\r\n                    <div className='poopoo'>\r\n                        {searchResults.map(track => (\r\n                            <TrackSearchResult track={track} key={track.uri} chooseTrack={chooseTrack} />\r\n                        ))}\r\n                    </div>\r\n                </div>&nbsp;\r\n                <div className='poopoo'>\r\n                    Select a Song and Hit Play!\r\n                    <Player accessToken={accessToken} trackUri={playingTrack?.uri}/>\r\n                </div>\r\n            </h1> \r\n        )\r\n    }\r\n    /* Matthew Greenway wrote this with some shared code from the youtube video\r\n     * \r\n     * Searches for top songs by artist when clicked\r\n     */\r\n    else if (chooseTopSongs) {\r\n        return (\r\n            <h1>\r\n                <button style={{ width: 300, backgroundColor: '#F56600', marginTop: 20, minHeight: 100, }} onClick={fChoosePlaylists}>\r\n                    <center>\r\n                        <h6>Search by Playlist</h6>\r\n                    </center>\r\n                </button>&nbsp;&nbsp;\r\n                <button style={{ width: 300, backgroundColor: '#522D80', marginTop: 20, minHeight: 100, }} onClick={fChooseTopSongs}>\r\n                    <center>\r\n                        <h6>Top Songs by Artist</h6>\r\n                    </center>\r\n                </button>&nbsp;&nbsp;\r\n                <button style={{ width: 300, backgroundColor: '#F56600', marginTop: 20, minHeight: 100, }} onClick={fChooseSearchSongs}>\r\n                    <center>\r\n                        <h6>Search by Song</h6>\r\n                    </center>\r\n                </button>&nbsp;&nbsp;\r\n                <a href={homePage}>\r\n                    <button style={{ width: 300, backgroundColor: '#522D80', marginTop: 20, minHeight: 100, }} onClick={fChooseMainMenu}>\r\n                        <center>\r\n                            <h6>Main Menu / Log Out</h6>\r\n                        </center>\r\n                </button>\r\n                </a>\r\n                <div className=\"search2\">\r\n                    <input value={search}\r\n                        onChange={e => setSearch(e.target.value)}\r\n                        placeholder='Search Artists'\r\n                        type=\"text\"\r\n                    />\r\n                </div>&nbsp;\r\n                <div className='container2'>\r\n                    <div className='poopoo'>\r\n                        {searchResults.map(track => (\r\n                            <TrackSearchResult track={track} key={track.uri} chooseTrack={chooseTrack} />\r\n                        ))}\r\n                    </div>\r\n                </div>&nbsp;\r\n                <div className='poopoo'>\r\n                    Select a Song and Hit Play!\r\n                    <Player accessToken={accessToken} trackUri={playingTrack?.uri}/>\r\n                </div>\r\n            </h1>\r\n        )\r\n    }\r\n    /* Code from https://www.youtube.com/watch?v=Xcet6msf3eE&t=237s\r\n     * Web Dev Simplified\r\n     * \"How to Build a Better Spotify with React\"\r\n     * \r\n     * After Search Songs button is clicked this runs\r\n     */\r\n    else if(chooseSearchSongs) {\r\n        return (\r\n            <h1>\r\n                <button style={{ width: 300, backgroundColor: '#F56600', marginTop: 20, minHeight: 100, }} onClick={fChoosePlaylists}>\r\n                    <center>\r\n                        <h6>Search by Playlist</h6>\r\n                    </center>\r\n                </button>&nbsp;&nbsp;\r\n                <button style={{ width: 300, backgroundColor: '#522D80', marginTop: 20, minHeight: 100, }} onClick={fChooseTopSongs}>\r\n                    <center>\r\n                        <h6>Top Songs by Artist</h6>\r\n                    </center>\r\n                </button>&nbsp;&nbsp;\r\n                <button style={{ width: 300, backgroundColor: '#F56600', marginTop: 20, minHeight: 100, }} onClick={fChooseSearchSongs}>\r\n                    <center>\r\n                        <h6>Search by Song</h6>\r\n                    </center>\r\n                </button>&nbsp;&nbsp;\r\n                <a href={homePage}>\r\n                    <button style={{ width: 300, backgroundColor: '#522D80', marginTop: 20, minHeight: 100, }} onClick={fChooseMainMenu}>\r\n                        <center>\r\n                            <h6>Main Menu / Log Out</h6>\r\n                        </center>\r\n                </button>\r\n                </a>\r\n                <div className=\"search2\">\r\n                    <input value={search}\r\n                        onChange={e => setSearch(e.target.value)}\r\n                        placeholder='Search Songs/Artists'\r\n                        type=\"text\"\r\n                    />\r\n                </div>&nbsp;\r\n                <div className='container2'>\r\n                    <div className='poopoo'>\r\n                        {searchResults.map(track => (\r\n                            <TrackSearchResult track={track} key={track.uri} chooseTrack={chooseTrack} />\r\n                        ))}\r\n                    </div>\r\n                </div>&nbsp;\r\n                <div className='poopoo'>\r\n                    Select a Song and Hit Play!\r\n                    <Player accessToken={accessToken} trackUri={playingTrack?.uri}/>\r\n                </div>\r\n            </h1>\r\n        )\r\n    } \r\n    else {\r\n        fChooseSearchSongs()\r\n        return (\r\n            <h1>\r\n                <button style={{ width: 300, backgroundColor: '#F56600', marginTop: 20, minHeight: 100, }} onClick={fChoosePlaylists}>\r\n                    <center>\r\n                        <h6>Search by Playlist</h6>\r\n                    </center>\r\n                </button>&nbsp;&nbsp;\r\n                <button style={{ width: 300, backgroundColor: '#522D80', marginTop: 20, minHeight: 100, }} onClick={fChooseTopSongs}>\r\n                    <center>\r\n                        <h6>Top Songs by Artist</h6>\r\n                    </center>\r\n                </button>&nbsp;&nbsp;\r\n                <button style={{ width: 300, backgroundColor: '#F56600', marginTop: 20, minHeight: 100, }} onClick={fChooseSearchSongs}>\r\n                    <center>\r\n                        <h6>Search by Song</h6>\r\n                    </center>\r\n                </button>&nbsp;&nbsp;\r\n                <a href={homePage}>\r\n                    <button style={{ width: 300, backgroundColor: '#522D80', marginTop: 20, minHeight: 100, }} onClick={fChooseMainMenu}>\r\n                        <center>\r\n                            <h6>Main Menu / Log Out</h6>\r\n                        </center>\r\n                </button>\r\n                </a>\r\n                <div className=\"search2\">\r\n                    <input value={search}\r\n                        onChange={e => setSearch(e.target.value)}\r\n                        placeholder='Search Songs/Artists'\r\n                        type=\"text\"\r\n                    />\r\n                </div>&nbsp;\r\n                <div className='container2'>\r\n                    <div className='poopoo'>\r\n                        {searchResults.map(track => (\r\n                            <TrackSearchResult track={track} key={track.uri} chooseTrack={chooseTrack} />\r\n                        ))}\r\n                    </div>\r\n                </div>&nbsp;\r\n                <div className='poopoo'>\r\n                    Select a Song and Hit Play!\r\n                    <Player accessToken={accessToken} trackUri={playingTrack?.uri}/>\r\n                </div>\r\n            </h1>\r\n        )\r\n    }\r\n}","C:\\Users\\tornt\\OneDrive\\Desktop\\temp\\src\\spotify\\useAuth.js",["54"],[],"C:\\Users\\tornt\\OneDrive\\Desktop\\temp\\src\\spotify\\Player.js",["55"],[],"/* Code from https://www.youtube.com/watch?v=Xcet6msf3eE&t=237s\r\n * Web Dev Simplified\r\n * \"How to Build a Better Spotify with React\"\r\n * \r\n * Handles spotify player, slight edits made by Matthew Greenway\r\n */\r\nimport React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport SpotifyPlayer from 'react-spotify-web-playback'\r\n\r\nexport default function Player({ accessToken, trackUri }) {\r\n    const [play, setPlay] = useState(false)\r\n    \r\n    useEffect(() => setPlay(true), [trackUri])\r\n\r\n    if (!accessToken) return null\r\n    return <SpotifyPlayer \r\n        //autoPlay={true}\r\n        token={accessToken}\r\n        showSaveIcon\r\n        callback={state => {\r\n            if (!state.isPlaying) setPlay(false)\r\n        }}\r\n        play={true}\r\n        uris={trackUri ? [trackUri] : []}\r\n        />\r\n}","C:\\Users\\tornt\\OneDrive\\Desktop\\temp\\src\\spotify\\TrackSearchResult.js",["56"],[],"/* Code from https://www.youtube.com/watch?v=Xcet6msf3eE&t=237s\r\n * Web Dev Simplified\r\n * \"How to Build a Better Spotify with React\"\r\n * \r\n * After Search Songs button is clicked this runs\r\n */\r\nimport React from 'react'\r\n\r\nexport default function TrackSearchResult({ track, chooseTrack}) {\r\n    function handlePlay() {\r\n        chooseTrack(track)\r\n    }\r\n\r\n    return (\r\n        <div style={{ cursor: 'pointer' }} onClick={handlePlay}>\r\n            <center>\r\n                <img src={track.albumUrl} style={{height: '64px', width: '64px'}}/>\r\n                <h6> {track.title} </h6>\r\n                <h4> {track.artist} </h4>&nbsp;\r\n            </center>\r\n\r\n        </div>\r\n    )\r\n}",{"ruleId":"57","severity":1,"message":"58","line":94,"column":66,"nodeType":"59","messageId":"60","endLine":94,"endColumn":68},{"ruleId":"57","severity":1,"message":"58","line":94,"column":100,"nodeType":"59","messageId":"60","endLine":94,"endColumn":102},{"ruleId":"57","severity":1,"message":"58","line":94,"column":134,"nodeType":"59","messageId":"60","endLine":94,"endColumn":136},{"ruleId":"61","severity":1,"message":"62","line":7,"column":8,"nodeType":"63","messageId":"64","endLine":7,"endColumn":21},{"ruleId":"61","severity":1,"message":"65","line":23,"column":12,"nodeType":"63","messageId":"64","endLine":23,"endColumn":26},{"ruleId":"61","severity":1,"message":"66","line":26,"column":12,"nodeType":"63","messageId":"64","endLine":26,"endColumn":16},{"ruleId":"61","severity":1,"message":"67","line":26,"column":18,"nodeType":"63","messageId":"64","endLine":26,"endColumn":25},{"ruleId":"68","severity":1,"message":"69","line":148,"column":8,"nodeType":"70","endLine":148,"endColumn":28,"suggestions":"71"},{"ruleId":"61","severity":1,"message":"72","line":7,"column":8,"nodeType":"63","messageId":"64","endLine":7,"endColumn":13},{"ruleId":"61","severity":1,"message":"66","line":12,"column":12,"nodeType":"63","messageId":"64","endLine":12,"endColumn":16},{"ruleId":"73","severity":1,"message":"74","line":17,"column":17,"nodeType":"75","endLine":17,"endColumn":84},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'SpotifyPlayer' is defined but never used.","Identifier","unusedVar","'chooseMainMenu' is assigned a value but never used.","'play' is assigned a value but never used.","'setPlay' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'artistID', 'choosePlaylists', 'chooseSearchSongs', 'chooseTopSongs', and 'market'. Either include them or remove the dependency array.","ArrayExpression",["76"],"'React' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"77","fix":"78"},"Update the dependencies array to be: [search, accessToken, chooseSearchSongs, choosePlaylists, chooseTopSongs, artistID, market]",{"range":"79","text":"80"},[5509,5529],"[search, accessToken, chooseSearchSongs, choosePlaylists, chooseTopSongs, artistID, market]"]